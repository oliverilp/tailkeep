// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id             Int             @id @default(autoincrement())
  youtubeId      String          @unique
  url            String
  title          String
  uploader       String
  durationString String
  duration       Int
  thumbnailUrl   String
  description    String
  viewCount      Int
  commentCount   Int
  progressList   VideoProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VideoProgress {
  id       Int     @id @default(autoincrement())
  video    Video   @relation(fields: [videoId], references: [id])
  videoId  Int
  jobId    Int     @unique
  status   String?
  progress Float
  size     String?
  speed    String?
  eta      String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // @@id([provider, providerAccountId])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
